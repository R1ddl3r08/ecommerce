{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\ecommerce\\\\frontend\\\\src\\\\store\\\\shopping-cart-context.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer, useRef } from 'react';\nimport { normalizeAttributes } from '../utilities/attributeUtils';\nimport { ToastContainer, toast } from 'react-toastify';\nimport CartModal from '../components/CartModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext({\n  items: [],\n  selectedAttributes: {},\n  addItemToCart: () => {},\n  updateItemQuantity: () => {},\n  handleCheckboxChange: () => {},\n  allAttributesSelected: () => false,\n  openCartModal: () => {}\n});\nfunction shoppingCartReducer(state, action) {\n  switch (action.type) {\n    case 'ADD_ITEM':\n      const updatedItems = [...state.items];\n      const newSelectedAttributes = normalizeAttributes(action.payload.selectedAttributes);\n      const existingCartItemIndex = updatedItems.findIndex(cartItem => cartItem.id === action.payload.id && JSON.stringify(normalizeAttributes(cartItem.selectedAttributes)) === JSON.stringify(newSelectedAttributes));\n      const existingCartItem = updatedItems[existingCartItemIndex];\n      if (existingCartItem) {\n        const updatedItem = {\n          ...existingCartItem,\n          quantity: existingCartItem.quantity + 1\n        };\n        updatedItems[existingCartItemIndex] = updatedItem;\n      } else {\n        updatedItems.push({\n          id: action.payload.id,\n          name: action.payload.name,\n          price: action.payload.price,\n          images: action.payload.images,\n          attributes: action.payload.attributes,\n          selectedAttributes: newSelectedAttributes,\n          quantity: 1\n        });\n      }\n      return {\n        ...state,\n        items: updatedItems\n      };\n    case 'UPDATE_ITEM':\n      const updatedItemsForUpdate = [...state.items];\n      const newSelectedAttributesForUpdate = normalizeAttributes(action.payload.selectedAttributes);\n      const existingItemIndexForUpdate = updatedItemsForUpdate.findIndex(item => item.id === action.payload.productId && JSON.stringify(normalizeAttributes(item.selectedAttributes)) === JSON.stringify(newSelectedAttributesForUpdate));\n      const existingItemForUpdate = updatedItemsForUpdate[existingItemIndexForUpdate];\n      if (existingItemForUpdate) {\n        const updatedItemForUpdate = {\n          ...existingItemForUpdate,\n          quantity: existingItemForUpdate.quantity + action.payload.amount\n        };\n        if (updatedItemForUpdate.quantity <= 0) {\n          updatedItemsForUpdate.splice(existingItemIndexForUpdate, 1);\n        } else {\n          updatedItemsForUpdate[existingItemIndexForUpdate] = updatedItemForUpdate;\n        }\n      }\n      return {\n        ...state,\n        items: updatedItemsForUpdate\n      };\n    case 'SET_SELECTED_ATTRIBUTES':\n      return {\n        ...state,\n        selectedAttributes: {\n          ...state.selectedAttributes,\n          [action.payload.setName]: action.payload.attrId\n        }\n      };\n    case 'RESET_SELECTED_ATTRIBUTES':\n      return {\n        ...state,\n        selectedAttributes: {}\n      };\n    case 'CLEAR_CART':\n      return {\n        ...state,\n        items: []\n      };\n    default:\n      return state;\n  }\n}\nexport default function CartContextProvider({\n  children\n}) {\n  _s();\n  const [shoppingCartState, shoppingCartDispatch] = useReducer(shoppingCartReducer, {\n    items: [],\n    selectedAttributes: {}\n  });\n  const cartModalRef = useRef(CartModal);\n  function handleAddItemToCart(product, selectedAttributes) {\n    shoppingCartDispatch({\n      type: 'ADD_ITEM',\n      payload: {\n        ...product,\n        selectedAttributes\n      }\n    });\n    shoppingCartDispatch({\n      type: 'RESET_SELECTED_ATTRIBUTES'\n    });\n    if (cartModalRef.current) {\n      cartModalRef.current.open();\n    }\n  }\n  function handleUpdateCartItemQuantity(productId, selectedAttributes, amount) {\n    shoppingCartDispatch({\n      type: 'UPDATE_ITEM',\n      payload: {\n        productId,\n        selectedAttributes,\n        amount\n      }\n    });\n  }\n  function handleCheckboxChange(setName, attrId) {\n    shoppingCartDispatch({\n      type: 'SET_SELECTED_ATTRIBUTES',\n      payload: {\n        setName,\n        attrId\n      }\n    });\n  }\n  function allAttributesSelected(groupedAttributes) {\n    return Object.keys(groupedAttributes).every(setName => shoppingCartState.selectedAttributes[setName]);\n  }\n  function clearCart() {\n    shoppingCartDispatch({\n      type: 'CLEAR_CART'\n    });\n  }\n  const ctxValue = {\n    items: shoppingCartState.items,\n    selectedAttributes: shoppingCartState.selectedAttributes,\n    addItemToCart: handleAddItemToCart,\n    updateItemQuantity: handleUpdateCartItemQuantity,\n    handleCheckboxChange: handleCheckboxChange,\n    allAttributesSelected: allAttributesSelected,\n    clearCart: clearCart\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: ctxValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n}\n_s(CartContextProvider, \"MeGRYt0Z+gxD2xz5rCVTxvCYKlc=\");\n_c = CartContextProvider;\nvar _c;\n$RefreshReg$(_c, \"CartContextProvider\");","map":{"version":3,"names":["React","createContext","useReducer","useRef","normalizeAttributes","ToastContainer","toast","CartModal","jsxDEV","_jsxDEV","CartContext","items","selectedAttributes","addItemToCart","updateItemQuantity","handleCheckboxChange","allAttributesSelected","openCartModal","shoppingCartReducer","state","action","type","updatedItems","newSelectedAttributes","payload","existingCartItemIndex","findIndex","cartItem","id","JSON","stringify","existingCartItem","updatedItem","quantity","push","name","price","images","attributes","updatedItemsForUpdate","newSelectedAttributesForUpdate","existingItemIndexForUpdate","item","productId","existingItemForUpdate","updatedItemForUpdate","amount","splice","setName","attrId","CartContextProvider","children","_s","shoppingCartState","shoppingCartDispatch","cartModalRef","handleAddItemToCart","product","current","open","handleUpdateCartItemQuantity","groupedAttributes","Object","keys","every","clearCart","ctxValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/ecommerce/frontend/src/store/shopping-cart-context.js"],"sourcesContent":["import React, { createContext, useReducer, useRef } from 'react';\r\nimport { normalizeAttributes } from '../utilities/attributeUtils';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport CartModal from '../components/CartModal';\r\n\r\nexport const CartContext = createContext({\r\n  items: [],\r\n  selectedAttributes: {},\r\n  addItemToCart: () => {},\r\n  updateItemQuantity: () => {},\r\n  handleCheckboxChange: () => {},\r\n  allAttributesSelected: () => false,\r\n  openCartModal: () => {},\r\n});\r\n\r\nfunction shoppingCartReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'ADD_ITEM':\r\n      const updatedItems = [...state.items];\r\n      const newSelectedAttributes = normalizeAttributes(action.payload.selectedAttributes);\r\n\r\n      const existingCartItemIndex = updatedItems.findIndex(\r\n        (cartItem) =>\r\n          cartItem.id === action.payload.id &&\r\n          JSON.stringify(normalizeAttributes(cartItem.selectedAttributes)) === JSON.stringify(newSelectedAttributes)\r\n      );\r\n      const existingCartItem = updatedItems[existingCartItemIndex];\r\n\r\n      if (existingCartItem) {\r\n        const updatedItem = {\r\n          ...existingCartItem,\r\n          quantity: existingCartItem.quantity + 1,\r\n        };\r\n        updatedItems[existingCartItemIndex] = updatedItem;\r\n      } else {\r\n        updatedItems.push({\r\n          id: action.payload.id,\r\n          name: action.payload.name,\r\n          price: action.payload.price,\r\n          images: action.payload.images,\r\n          attributes: action.payload.attributes,\r\n          selectedAttributes: newSelectedAttributes,\r\n          quantity: 1,\r\n        });\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        items: updatedItems,\r\n      };\r\n\r\n    case 'UPDATE_ITEM':\r\n      const updatedItemsForUpdate = [...state.items];\r\n      const newSelectedAttributesForUpdate = normalizeAttributes(action.payload.selectedAttributes);\r\n\r\n      const existingItemIndexForUpdate = updatedItemsForUpdate.findIndex(\r\n        (item) =>\r\n          item.id === action.payload.productId &&\r\n          JSON.stringify(normalizeAttributes(item.selectedAttributes)) === JSON.stringify(newSelectedAttributesForUpdate)\r\n      );\r\n      const existingItemForUpdate = updatedItemsForUpdate[existingItemIndexForUpdate];\r\n\r\n      if (existingItemForUpdate) {\r\n        const updatedItemForUpdate = {\r\n          ...existingItemForUpdate,\r\n          quantity: existingItemForUpdate.quantity + action.payload.amount,\r\n        };\r\n\r\n        if (updatedItemForUpdate.quantity <= 0) {\r\n          updatedItemsForUpdate.splice(existingItemIndexForUpdate, 1);\r\n        } else {\r\n          updatedItemsForUpdate[existingItemIndexForUpdate] = updatedItemForUpdate;\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        items: updatedItemsForUpdate,\r\n      };\r\n\r\n    case 'SET_SELECTED_ATTRIBUTES':\r\n      return {\r\n        ...state,\r\n        selectedAttributes: {\r\n          ...state.selectedAttributes,\r\n          [action.payload.setName]: action.payload.attrId,\r\n        },\r\n      };\r\n\r\n    case 'RESET_SELECTED_ATTRIBUTES':\r\n      return {\r\n        ...state,\r\n        selectedAttributes: {},\r\n      };\r\n\r\n    case 'CLEAR_CART':\r\n      return {\r\n        ...state,\r\n        items: [],\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n\r\n  \r\n}\r\n\r\nexport default function CartContextProvider({ children }) {\r\n  const [shoppingCartState, shoppingCartDispatch] = useReducer(shoppingCartReducer, {\r\n    items: [],\r\n    selectedAttributes: {},\r\n  });\r\n\r\n  const cartModalRef = useRef(CartModal);\r\n\r\n  function handleAddItemToCart(product, selectedAttributes) {\r\n    shoppingCartDispatch({\r\n      type: 'ADD_ITEM',\r\n      payload: {\r\n        ...product,\r\n        selectedAttributes,\r\n      },\r\n    });\r\n    shoppingCartDispatch({\r\n      type: 'RESET_SELECTED_ATTRIBUTES',\r\n    });\r\n    if (cartModalRef.current) {\r\n      cartModalRef.current.open();\r\n    }\r\n  }\r\n\r\n  function handleUpdateCartItemQuantity(productId, selectedAttributes, amount) {\r\n    shoppingCartDispatch({\r\n      type: 'UPDATE_ITEM',\r\n      payload: {\r\n        productId,\r\n        selectedAttributes,\r\n        amount,\r\n      },\r\n    });\r\n  }\r\n\r\n  function handleCheckboxChange(setName, attrId) {\r\n    shoppingCartDispatch({\r\n      type: 'SET_SELECTED_ATTRIBUTES',\r\n      payload: {\r\n        setName,\r\n        attrId,\r\n      },\r\n    });\r\n  }\r\n\r\n  function allAttributesSelected(groupedAttributes) {\r\n    return Object.keys(groupedAttributes).every(\r\n      (setName) => shoppingCartState.selectedAttributes[setName]\r\n    );\r\n  }\r\n\r\n  function clearCart() {\r\n    shoppingCartDispatch({ type: 'CLEAR_CART' });\r\n  }\r\n\r\n  const ctxValue = {\r\n    items: shoppingCartState.items,\r\n    selectedAttributes: shoppingCartState.selectedAttributes,\r\n    addItemToCart: handleAddItemToCart,\r\n    updateItemQuantity: handleUpdateCartItemQuantity,\r\n    handleCheckboxChange: handleCheckboxChange,\r\n    allAttributesSelected: allAttributesSelected,\r\n    clearCart: clearCart,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={ctxValue}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}