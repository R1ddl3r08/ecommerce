{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\ecommerce\\\\frontend\\\\src\\\\store\\\\shopping-cart-context.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext({\n  items: [],\n  selectedAttributes: {},\n  addItemToCart: () => {},\n  updateItemQuantity: () => {},\n  handleCheckboxChange: () => {},\n  allAttributesSelected: () => false\n});\nfunction shoppingCartReducer(state, action) {\n  switch (action.type) {\n    case 'ADD_ITEM':\n      const updatedItems = [...state.items];\n      const existingCartItemIndex = updatedItems.findIndex(cartItem => cartItem.id === action.payload.id && JSON.stringify(cartItem.selectedAttributes) === JSON.stringify(action.payload.selectedAttributes));\n      const existingCartItem = updatedItems[existingCartItemIndex];\n      if (existingCartItem) {\n        const updatedItem = {\n          ...existingCartItem,\n          quantity: existingCartItem.quantity + 1\n        };\n        updatedItems[existingCartItemIndex] = updatedItem;\n      } else {\n        updatedItems.push({\n          ...action.payload,\n          quantity: 1\n        });\n      }\n      return {\n        ...state,\n        items: updatedItems\n      };\n    case 'UPDATE_ITEM':\n      const updatedItemsForUpdate = [...state.items];\n      const existingItemIndexForUpdate = updatedItemsForUpdate.findIndex(item => item.id === action.payload.productId && JSON.stringify(item.selectedAttributes) === JSON.stringify(action.payload.selectedAttributes));\n      const existingItemForUpdate = updatedItemsForUpdate[existingItemIndexForUpdate];\n      if (existingItemForUpdate) {\n        const updatedItemForUpdate = {\n          ...existingItemForUpdate,\n          quantity: existingItemForUpdate.quantity + action.payload.amount\n        };\n        if (updatedItemForUpdate.quantity <= 0) {\n          updatedItemsForUpdate.splice(existingItemIndexForUpdate, 1);\n        } else {\n          updatedItemsForUpdate[existingItemIndexForUpdate] = updatedItemForUpdate;\n        }\n      }\n      return {\n        ...state,\n        items: updatedItemsForUpdate\n      };\n    case 'SET_SELECTED_ATTRIBUTES':\n      return {\n        ...state,\n        selectedAttributes: {\n          ...state.selectedAttributes,\n          [action.payload.setName]: action.payload.attrId\n        }\n      };\n    case 'RESET_SELECTED_ATTRIBUTES':\n      return {\n        ...state,\n        selectedAttributes: {}\n      };\n    default:\n      return state;\n  }\n}\nexport default function CartContextProvider({\n  children\n}) {\n  _s();\n  const [shoppingCartState, shoppingCartDispatch] = useReducer(shoppingCartReducer, {\n    items: [],\n    selectedAttributes: {}\n  });\n  function handleAddItemToCart(product, selectedAttributes) {\n    shoppingCartDispatch({\n      type: 'ADD_ITEM',\n      payload: {\n        ...product,\n        selectedAttributes\n      }\n    });\n    shoppingCartDispatch({\n      type: 'RESET_SELECTED_ATTRIBUTES'\n    });\n  }\n  function handleUpdateCartItemQuantity(productId, selectedAttributes, amount) {\n    shoppingCartDispatch({\n      type: 'UPDATE_ITEM',\n      payload: {\n        productId,\n        selectedAttributes,\n        amount\n      }\n    });\n  }\n  function handleCheckboxChange(setName, attrId) {\n    shoppingCartDispatch({\n      type: 'SET_SELECTED_ATTRIBUTES',\n      payload: {\n        setName,\n        attrId\n      }\n    });\n  }\n  function allAttributesSelected(groupedAttributes) {\n    return Object.keys(groupedAttributes).every(setName => shoppingCartState.selectedAttributes[setName]);\n  }\n  const ctxValue = {\n    items: shoppingCartState.items,\n    selectedAttributes: shoppingCartState.selectedAttributes,\n    addItemToCart: handleAddItemToCart,\n    updateItemQuantity: handleUpdateCartItemQuantity,\n    handleCheckboxChange: handleCheckboxChange,\n    allAttributesSelected: allAttributesSelected\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: ctxValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n_s(CartContextProvider, \"TZ6IO3zwvK5PyF9iqRmMYWcqKNc=\");\n_c = CartContextProvider;\nvar _c;\n$RefreshReg$(_c, \"CartContextProvider\");","map":{"version":3,"names":["React","createContext","useReducer","jsxDEV","_jsxDEV","CartContext","items","selectedAttributes","addItemToCart","updateItemQuantity","handleCheckboxChange","allAttributesSelected","shoppingCartReducer","state","action","type","updatedItems","existingCartItemIndex","findIndex","cartItem","id","payload","JSON","stringify","existingCartItem","updatedItem","quantity","push","updatedItemsForUpdate","existingItemIndexForUpdate","item","productId","existingItemForUpdate","updatedItemForUpdate","amount","splice","setName","attrId","CartContextProvider","children","_s","shoppingCartState","shoppingCartDispatch","handleAddItemToCart","product","handleUpdateCartItemQuantity","groupedAttributes","Object","keys","every","ctxValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/ecommerce/frontend/src/store/shopping-cart-context.js"],"sourcesContent":["import React, { createContext, useReducer } from 'react';\r\n\r\nexport const CartContext = createContext({\r\n  items: [],\r\n  selectedAttributes: {},\r\n  addItemToCart: () => {},\r\n  updateItemQuantity: () => {},\r\n  handleCheckboxChange: () => {},\r\n  allAttributesSelected: () => false,\r\n});\r\n\r\nfunction shoppingCartReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'ADD_ITEM':\r\n      const updatedItems = [...state.items];\r\n      const existingCartItemIndex = updatedItems.findIndex(\r\n        (cartItem) =>\r\n          cartItem.id === action.payload.id &&\r\n          JSON.stringify(cartItem.selectedAttributes) === JSON.stringify(action.payload.selectedAttributes)\r\n      );\r\n      const existingCartItem = updatedItems[existingCartItemIndex];\r\n\r\n      if (existingCartItem) {\r\n        const updatedItem = {\r\n          ...existingCartItem,\r\n          quantity: existingCartItem.quantity + 1,\r\n        };\r\n        updatedItems[existingCartItemIndex] = updatedItem;\r\n      } else {\r\n        updatedItems.push({\r\n          ...action.payload,\r\n          quantity: 1,\r\n        });\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        items: updatedItems,\r\n      };\r\n\r\n    case 'UPDATE_ITEM':\r\n      const updatedItemsForUpdate = [...state.items];\r\n      const existingItemIndexForUpdate = updatedItemsForUpdate.findIndex(\r\n        (item) =>\r\n          item.id === action.payload.productId &&\r\n          JSON.stringify(item.selectedAttributes) === JSON.stringify(action.payload.selectedAttributes)\r\n      );\r\n      const existingItemForUpdate = updatedItemsForUpdate[existingItemIndexForUpdate];\r\n\r\n      if (existingItemForUpdate) {\r\n        const updatedItemForUpdate = {\r\n          ...existingItemForUpdate,\r\n          quantity: existingItemForUpdate.quantity + action.payload.amount,\r\n        };\r\n\r\n        if (updatedItemForUpdate.quantity <= 0) {\r\n          updatedItemsForUpdate.splice(existingItemIndexForUpdate, 1);\r\n        } else {\r\n          updatedItemsForUpdate[existingItemIndexForUpdate] = updatedItemForUpdate;\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        items: updatedItemsForUpdate,\r\n      };\r\n\r\n    case 'SET_SELECTED_ATTRIBUTES':\r\n      return {\r\n        ...state,\r\n        selectedAttributes: {\r\n          ...state.selectedAttributes,\r\n          [action.payload.setName]: action.payload.attrId,\r\n        },\r\n      };\r\n\r\n    case 'RESET_SELECTED_ATTRIBUTES':\r\n      return {\r\n        ...state,\r\n        selectedAttributes: {},\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default function CartContextProvider({ children }) {\r\n  const [shoppingCartState, shoppingCartDispatch] = useReducer(shoppingCartReducer, {\r\n    items: [],\r\n    selectedAttributes: {},\r\n  });\r\n\r\n  function handleAddItemToCart(product, selectedAttributes) {\r\n    shoppingCartDispatch({\r\n      type: 'ADD_ITEM',\r\n      payload: {\r\n        ...product,\r\n        selectedAttributes,\r\n      },\r\n    });\r\n    shoppingCartDispatch({\r\n      type: 'RESET_SELECTED_ATTRIBUTES',\r\n    });\r\n  }\r\n\r\n  function handleUpdateCartItemQuantity(productId, selectedAttributes, amount) {\r\n    shoppingCartDispatch({\r\n      type: 'UPDATE_ITEM',\r\n      payload: {\r\n        productId,\r\n        selectedAttributes,\r\n        amount,\r\n      },\r\n    });\r\n  }\r\n\r\n  function handleCheckboxChange(setName, attrId) {\r\n    shoppingCartDispatch({\r\n      type: 'SET_SELECTED_ATTRIBUTES',\r\n      payload: {\r\n        setName,\r\n        attrId,\r\n      },\r\n    });\r\n  }\r\n\r\n  function allAttributesSelected(groupedAttributes) {\r\n    return Object.keys(groupedAttributes).every(\r\n      (setName) => shoppingCartState.selectedAttributes[setName]\r\n    );\r\n  }\r\n\r\n  const ctxValue = {\r\n    items: shoppingCartState.items,\r\n    selectedAttributes: shoppingCartState.selectedAttributes,\r\n    addItemToCart: handleAddItemToCart,\r\n    updateItemQuantity: handleUpdateCartItemQuantity,\r\n    handleCheckboxChange: handleCheckboxChange,\r\n    allAttributesSelected: allAttributesSelected,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={ctxValue}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}