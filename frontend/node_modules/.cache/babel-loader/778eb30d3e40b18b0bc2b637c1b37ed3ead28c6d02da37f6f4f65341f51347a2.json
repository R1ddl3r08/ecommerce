{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\ecommerce\\\\frontend\\\\src\\\\store\\\\shopping-cart-context.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer, useState } from 'react';\nimport { gql, useLazyQuery } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext({\n  items: [],\n  selectedAttributes: {},\n  addItemToCart: () => {},\n  updateItemQuantity: () => {},\n  handleCheckboxChange: () => {},\n  allAttributesSelected: () => {},\n  resetSelectedAttributes: () => {}\n});\nconst GET_PRODUCT_BY_ID = gql`\n  query GetProductById($id: String!) {\n    product(id: $id) {\n      id\n      name\n      inStock\n      description\n      price {\n        amount\n        currency {\n          symbol\n        }\n      }\n      images {\n        image_url\n      }\n      attributes {\n        id\n        value\n        display_value\n        attribute_set {\n            name\n        }\n      }\n    }\n  }\n`;\nfunction shoppingCartReducer(state, action) {\n  if (action.type === 'ADD_ITEM') {\n    const updatedItems = [...state.items];\n    const newItem = action.payload;\n    const existingCartItemIndex = updatedItems.findIndex(cartItem => cartItem.id === newItem.id && JSON.stringify(cartItem.selectedAttributes) === JSON.stringify(newItem.selectedAttributes));\n    if (existingCartItemIndex >= 0) {\n      updatedItems[existingCartItemIndex].quantity += 1;\n    } else {\n      updatedItems.push({\n        ...newItem,\n        quantity: 1\n      });\n    }\n    return {\n      ...state,\n      items: updatedItems\n    };\n  }\n  if (action.type === 'UPDATE_ITEM') {\n    const updatedItems = [...state.items];\n    const updatedItemIndex = updatedItems.findIndex(item => item.id === action.payload.productId);\n    if (updatedItemIndex >= 0) {\n      updatedItems[updatedItemIndex].quantity += action.payload.amount;\n      if (updatedItems[updatedItemIndex].quantity <= 0) {\n        updatedItems.splice(updatedItemIndex, 1);\n      }\n    }\n    return {\n      ...state,\n      items: updatedItems\n    };\n  }\n  return state;\n}\nexport default function CartContextProvider({\n  children\n}) {\n  _s();\n  const [shoppingCartState, shoppingCartDispatch] = useReducer(shoppingCartReducer, {\n    items: []\n  });\n  const [selectedAttributes, setSelectedAttributes] = useState({});\n  const [fetchProduct] = useLazyQuery(GET_PRODUCT_BY_ID, {\n    onCompleted: data => {\n      shoppingCartDispatch({\n        type: 'ADD_ITEM',\n        payload: {\n          ...data.product,\n          selectedAttributes\n        }\n      });\n    }\n  });\n  function handleAddItemToCart(id, attributes) {\n    fetchProduct({\n      variables: {\n        id\n      }\n    });\n  }\n  function handleUpdateCartItemQuantity(productId, amount) {\n    shoppingCartDispatch({\n      type: 'UPDATE_ITEM',\n      payload: {\n        productId,\n        amount\n      }\n    });\n  }\n  const handleCheckboxChange = (setName, attrId) => {\n    setSelectedAttributes(prevState => ({\n      ...prevState,\n      [setName]: attrId\n    }));\n  };\n  const allAttributesSelected = (selectedAttributes, groupedAttributes) => {\n    return Object.keys(groupedAttributes).every(setName => selectedAttributes[setName]);\n  };\n  const resetSelectedAttributes = () => {\n    setSelectedAttributes({});\n  };\n  const ctxValue = {\n    items: shoppingCartState.items,\n    selectedAttributes,\n    addItemToCart: handleAddItemToCart,\n    updateItemQuantity: handleUpdateCartItemQuantity,\n    handleCheckboxChange,\n    allAttributesSelected,\n    resetSelectedAttributes\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: ctxValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n}\n_s(CartContextProvider, \"1csXPFsQ87d5ytYULC04VuUzq7k=\", false, function () {\n  return [useLazyQuery];\n});\n_c = CartContextProvider;\nvar _c;\n$RefreshReg$(_c, \"CartContextProvider\");","map":{"version":3,"names":["createContext","useReducer","useState","gql","useLazyQuery","jsxDEV","_jsxDEV","CartContext","items","selectedAttributes","addItemToCart","updateItemQuantity","handleCheckboxChange","allAttributesSelected","resetSelectedAttributes","GET_PRODUCT_BY_ID","shoppingCartReducer","state","action","type","updatedItems","newItem","payload","existingCartItemIndex","findIndex","cartItem","id","JSON","stringify","quantity","push","updatedItemIndex","item","productId","amount","splice","CartContextProvider","children","_s","shoppingCartState","shoppingCartDispatch","setSelectedAttributes","fetchProduct","onCompleted","data","product","handleAddItemToCart","attributes","variables","handleUpdateCartItemQuantity","setName","attrId","prevState","groupedAttributes","Object","keys","every","ctxValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/ecommerce/frontend/src/store/shopping-cart-context.js"],"sourcesContent":["import { createContext, useReducer, useState } from 'react';\r\nimport { gql, useLazyQuery } from '@apollo/client';\r\n\r\nexport const CartContext = createContext({\r\n  items: [],\r\n  selectedAttributes: {},\r\n  addItemToCart: () => {},\r\n  updateItemQuantity: () => {},\r\n  handleCheckboxChange: () => {},\r\n  allAttributesSelected: () => {},\r\n  resetSelectedAttributes: () => {},\r\n});\r\n\r\nconst GET_PRODUCT_BY_ID = gql`\r\n  query GetProductById($id: String!) {\r\n    product(id: $id) {\r\n      id\r\n      name\r\n      inStock\r\n      description\r\n      price {\r\n        amount\r\n        currency {\r\n          symbol\r\n        }\r\n      }\r\n      images {\r\n        image_url\r\n      }\r\n      attributes {\r\n        id\r\n        value\r\n        display_value\r\n        attribute_set {\r\n            name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction shoppingCartReducer(state, action) {\r\n  if (action.type === 'ADD_ITEM') {\r\n    const updatedItems = [...state.items];\r\n    const newItem = action.payload;\r\n\r\n    const existingCartItemIndex = updatedItems.findIndex(\r\n      (cartItem) => \r\n        cartItem.id === newItem.id && \r\n        JSON.stringify(cartItem.selectedAttributes) === JSON.stringify(newItem.selectedAttributes)\r\n    );\r\n\r\n    if (existingCartItemIndex >= 0) {\r\n      updatedItems[existingCartItemIndex].quantity += 1;\r\n    } else {\r\n      updatedItems.push({ ...newItem, quantity: 1 });\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      items: updatedItems,\r\n    };\r\n  }\r\n\r\n  if (action.type === 'UPDATE_ITEM') {\r\n    const updatedItems = [...state.items];\r\n    const updatedItemIndex = updatedItems.findIndex(\r\n      (item) => item.id === action.payload.productId\r\n    );\r\n\r\n    if (updatedItemIndex >= 0) {\r\n      updatedItems[updatedItemIndex].quantity += action.payload.amount;\r\n\r\n      if (updatedItems[updatedItemIndex].quantity <= 0) {\r\n        updatedItems.splice(updatedItemIndex, 1);\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      items: updatedItems,\r\n    };\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nexport default function CartContextProvider({ children }) {\r\n  const [shoppingCartState, shoppingCartDispatch] = useReducer(shoppingCartReducer, {\r\n    items: [],\r\n  });\r\n\r\n  const [selectedAttributes, setSelectedAttributes] = useState({});\r\n\r\n  const [fetchProduct] = useLazyQuery(GET_PRODUCT_BY_ID, {\r\n    onCompleted: (data) => {\r\n      shoppingCartDispatch({\r\n        type: 'ADD_ITEM',\r\n        payload: {\r\n          ...data.product,\r\n          selectedAttributes,\r\n        },\r\n      });\r\n    },\r\n  });\r\n\r\n  function handleAddItemToCart(id, attributes) {\r\n    fetchProduct({ variables: { id } });\r\n  }\r\n\r\n  function handleUpdateCartItemQuantity(productId, amount) {\r\n    shoppingCartDispatch({\r\n      type: 'UPDATE_ITEM',\r\n      payload: {\r\n        productId,\r\n        amount,\r\n      },\r\n    });\r\n  }\r\n\r\n  const handleCheckboxChange = (setName, attrId) => {\r\n    setSelectedAttributes((prevState) => ({\r\n      ...prevState,\r\n      [setName]: attrId,\r\n    }));\r\n  };\r\n\r\n  const allAttributesSelected = (selectedAttributes, groupedAttributes) => {\r\n    return Object.keys(groupedAttributes).every((setName) => selectedAttributes[setName]);\r\n  };\r\n\r\n  const resetSelectedAttributes = () => {\r\n    setSelectedAttributes({});\r\n  };\r\n\r\n  const ctxValue = {\r\n    items: shoppingCartState.items,\r\n    selectedAttributes,\r\n    addItemToCart: handleAddItemToCart,\r\n    updateItemQuantity: handleUpdateCartItemQuantity,\r\n    handleCheckboxChange,\r\n    allAttributesSelected,\r\n    resetSelectedAttributes,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={ctxValue}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}