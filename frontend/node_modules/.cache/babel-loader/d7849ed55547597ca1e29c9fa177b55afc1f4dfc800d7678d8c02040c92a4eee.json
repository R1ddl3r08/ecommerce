{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\ecommerce\\\\frontend\\\\src\\\\store\\\\shopping-cart-context.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from 'react';\nimport { gql, useLazyQuery } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext({\n  items: [],\n  selectedAttributes: {},\n  addItemToCart: () => {},\n  updatedItemQuantity: () => {},\n  handleCheckboxChange: () => {},\n  allAttributesSelected: () => false\n});\nconst GET_PRODUCT_BY_ID = gql`\n  query GetProductById($id: String!) {\n    product(id: $id) {\n      id\n      name\n      inStock\n      description\n      price {\n        amount\n        currency {\n          symbol\n        }\n      }\n      images {\n        image_url\n      }\n      attributes {\n        id\n        value\n        display_value\n        attribute_set {\n          name\n        }\n      }\n    }\n  }\n`;\nfunction shoppingCartReducer(state, action) {\n  switch (action.type) {\n    case 'ADD_ITEM':\n      const updatedItems = [...state.items];\n      const existingCartItemIndex = updatedItems.findIndex(cartItem => cartItem.id === action.payload.id);\n      const existingCartItem = updatedItems[existingCartItemIndex];\n      if (existingCartItem) {\n        const updatedItem = {\n          ...existingCartItem,\n          quantity: existingCartItem.quantity + 1\n        };\n        updatedItems[existingCartItemIndex] = updatedItem;\n      } else {\n        updatedItems.push({\n          id: action.payload.id,\n          name: action.payload.name,\n          price: action.payload.price,\n          images: action.payload.images,\n          attributes: action.payload.attributes,\n          quantity: 1\n        });\n      }\n      return {\n        ...state,\n        items: updatedItems\n      };\n    case 'UPDATE_ITEM':\n      const updatedItemsForUpdate = [...state.items];\n      const updatedItemIndex = updatedItemsForUpdate.findIndex(item => item.id === action.payload.productId);\n      const updatedItem = {\n        ...updatedItemsForUpdate[updatedItemIndex]\n      };\n      updatedItem.quantity += action.payload.amount;\n      if (updatedItem.quantity <= 0) {\n        updatedItemsForUpdate.splice(updatedItemIndex, 1);\n      } else {\n        updatedItemsForUpdate[updatedItemIndex] = updatedItem;\n      }\n      return {\n        ...state,\n        items: updatedItemsForUpdate\n      };\n    case 'SET_SELECTED_ATTRIBUTES':\n      return {\n        ...state,\n        selectedAttributes: {\n          ...state.selectedAttributes,\n          [action.payload.setName]: action.payload.attrId\n        }\n      };\n    default:\n      return state;\n  }\n}\nexport default function CartContextProvider({\n  children\n}) {\n  _s();\n  const [shoppingCartState, shoppingCartDispatch] = useReducer(shoppingCartReducer, {\n    items: [],\n    selectedAttributes: {}\n  });\n  const [fetchProduct] = useLazyQuery(GET_PRODUCT_BY_ID, {\n    onCompleted: data => {\n      shoppingCartDispatch({\n        type: 'ADD_ITEM',\n        payload: data.product\n      });\n      console.log(data);\n    }\n  });\n  function handleAddItemToCart(id) {\n    fetchProduct({\n      variables: {\n        id\n      }\n    });\n  }\n  function handleUpdateCartItemQuantity(productId, amount) {\n    shoppingCartDispatch({\n      type: 'UPDATE_ITEM',\n      payload: {\n        productId,\n        amount\n      }\n    });\n  }\n  function handleCheckboxChange(setName, attrId) {\n    shoppingCartDispatch({\n      type: 'SET_SELECTED_ATTRIBUTES',\n      payload: {\n        setName,\n        attrId\n      }\n    });\n  }\n  function allAttributesSelected(groupedAttributes) {\n    return Object.keys(groupedAttributes).every(setName => shoppingCartState.selectedAttributes[setName]);\n  }\n  const ctxValue = {\n    items: shoppingCartState.items,\n    selectedAttributes: shoppingCartState.selectedAttributes,\n    addItemToCart: handleAddItemToCart,\n    updatedItemQuantity: handleUpdateCartItemQuantity,\n    handleCheckboxChange: handleCheckboxChange,\n    allAttributesSelected: allAttributesSelected\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: ctxValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n}\n_s(CartContextProvider, \"XoON4pdT3i2bJI5nhOjbDj6bis4=\", false, function () {\n  return [useLazyQuery];\n});\n_c = CartContextProvider;\nvar _c;\n$RefreshReg$(_c, \"CartContextProvider\");","map":{"version":3,"names":["createContext","useReducer","gql","useLazyQuery","jsxDEV","_jsxDEV","CartContext","items","selectedAttributes","addItemToCart","updatedItemQuantity","handleCheckboxChange","allAttributesSelected","GET_PRODUCT_BY_ID","shoppingCartReducer","state","action","type","updatedItems","existingCartItemIndex","findIndex","cartItem","id","payload","existingCartItem","updatedItem","quantity","push","name","price","images","attributes","updatedItemsForUpdate","updatedItemIndex","item","productId","amount","splice","setName","attrId","CartContextProvider","children","_s","shoppingCartState","shoppingCartDispatch","fetchProduct","onCompleted","data","product","console","log","handleAddItemToCart","variables","handleUpdateCartItemQuantity","groupedAttributes","Object","keys","every","ctxValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/ecommerce/frontend/src/store/shopping-cart-context.js"],"sourcesContent":["import { createContext, useReducer } from 'react';\r\nimport { gql, useLazyQuery } from '@apollo/client';\r\n\r\nexport const CartContext = createContext({\r\n  items: [],\r\n  selectedAttributes: {},\r\n  addItemToCart: () => {},\r\n  updatedItemQuantity: () => {},\r\n  handleCheckboxChange: () => {},\r\n  allAttributesSelected: () => false,\r\n});\r\n\r\nconst GET_PRODUCT_BY_ID = gql`\r\n  query GetProductById($id: String!) {\r\n    product(id: $id) {\r\n      id\r\n      name\r\n      inStock\r\n      description\r\n      price {\r\n        amount\r\n        currency {\r\n          symbol\r\n        }\r\n      }\r\n      images {\r\n        image_url\r\n      }\r\n      attributes {\r\n        id\r\n        value\r\n        display_value\r\n        attribute_set {\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction shoppingCartReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'ADD_ITEM':\r\n      const updatedItems = [...state.items];\r\n      const existingCartItemIndex = updatedItems.findIndex(\r\n        (cartItem) => cartItem.id === action.payload.id\r\n      );\r\n      const existingCartItem = updatedItems[existingCartItemIndex];\r\n\r\n      if (existingCartItem) {\r\n        const updatedItem = {\r\n          ...existingCartItem,\r\n          quantity: existingCartItem.quantity + 1,\r\n        };\r\n        updatedItems[existingCartItemIndex] = updatedItem;\r\n      } else {\r\n        updatedItems.push({\r\n          id: action.payload.id,\r\n          name: action.payload.name,\r\n          price: action.payload.price,\r\n          images: action.payload.images,\r\n          attributes: action.payload.attributes,\r\n          quantity: 1,\r\n        });\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        items: updatedItems,\r\n      };\r\n\r\n    case 'UPDATE_ITEM':\r\n      const updatedItemsForUpdate = [...state.items];\r\n      const updatedItemIndex = updatedItemsForUpdate.findIndex(\r\n        (item) => item.id === action.payload.productId\r\n      );\r\n      const updatedItem = {\r\n        ...updatedItemsForUpdate[updatedItemIndex],\r\n      };\r\n\r\n      updatedItem.quantity += action.payload.amount;\r\n\r\n      if (updatedItem.quantity <= 0) {\r\n        updatedItemsForUpdate.splice(updatedItemIndex, 1);\r\n      } else {\r\n        updatedItemsForUpdate[updatedItemIndex] = updatedItem;\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        items: updatedItemsForUpdate,\r\n      };\r\n\r\n    case 'SET_SELECTED_ATTRIBUTES':\r\n      return {\r\n        ...state,\r\n        selectedAttributes: {\r\n          ...state.selectedAttributes,\r\n          [action.payload.setName]: action.payload.attrId,\r\n        },\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default function CartContextProvider({ children }) {\r\n  const [shoppingCartState, shoppingCartDispatch] = useReducer(shoppingCartReducer, {\r\n    items: [],\r\n    selectedAttributes: {},\r\n  });\r\n\r\n  const [fetchProduct] = useLazyQuery(GET_PRODUCT_BY_ID, {\r\n    onCompleted: (data) => {\r\n      shoppingCartDispatch({\r\n        type: 'ADD_ITEM',\r\n        payload: data.product,\r\n      });\r\n      console.log(data);\r\n    },\r\n  });\r\n\r\n  function handleAddItemToCart(id) {\r\n    fetchProduct({ variables: { id } });\r\n  }\r\n\r\n  function handleUpdateCartItemQuantity(productId, amount) {\r\n    shoppingCartDispatch({\r\n      type: 'UPDATE_ITEM',\r\n      payload: {\r\n        productId,\r\n        amount,\r\n      },\r\n    });\r\n  }\r\n\r\n  function handleCheckboxChange(setName, attrId) {\r\n    shoppingCartDispatch({\r\n      type: 'SET_SELECTED_ATTRIBUTES',\r\n      payload: {\r\n        setName,\r\n        attrId,\r\n      },\r\n    });\r\n  }\r\n\r\n  function allAttributesSelected(groupedAttributes) {\r\n    return Object.keys(groupedAttributes).every(\r\n      (setName) => shoppingCartState.selectedAttributes[setName]\r\n    );\r\n  }\r\n\r\n  const ctxValue = {\r\n    items: shoppingCartState.items,\r\n    selectedAttributes: shoppingCartState.selectedAttributes,\r\n    addItemToCart: handleAddItemToCart,\r\n    updatedItemQuantity: handleUpdateCartItemQuantity,\r\n    handleCheckboxChange: handleCheckboxChange,\r\n    allAttributesSelected: allAttributesSelected,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={ctxValue}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}